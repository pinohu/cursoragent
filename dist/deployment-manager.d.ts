/**
 * Deployment Manager for Cursor Composer Automation
 *
 * This module handles packaging and deployment of applications generated by Cursor Composer
 */
import * as winston from 'winston';
import { DeploymentTarget, DeploymentSettings } from './core/types';
export declare class DeploymentManager {
    private logger;
    private settings;
    constructor(logger: winston.Logger, settings: DeploymentSettings);
    /**
     * Deploy application to specified targets
     * @param projectDir Path to the project directory
     * @returns Object mapping deployment targets to their URLs
     */
    deployApplication(projectDir: string): Promise<Record<string, string>>;
    /**
     * Detect application type and framework
     * @param projectDir Path to the project directory
     * @returns Object with type and framework information
     */
    private detectApplicationType;
    /**
     * Package application for deployment
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     */
    private packageApplication;
    /**
     * Deploy application to a specific target
     * @param projectDir Path to the project directory
     * @param target Deployment target
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToTarget;
    /**
     * Deploy to Vercel
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToVercel;
    /**
     * Deploy to Netlify
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToNetlify;
    /**
     * Deploy to AWS
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToAWS;
    /**
     * Deploy to Azure
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToAzure;
    /**
     * Deploy to GCP
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToGCP;
    /**
     * Deploy to Heroku
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToHeroku;
    /**
     * Deploy to Digital Ocean
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToDigitalOcean;
    /**
     * Deploy to GitHub Pages
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToGitHubPages;
    /**
     * Deploy to custom target
     * @param projectDir Path to the project directory
     * @param appInfo Application type and framework information
     * @returns Deployment URL
     */
    private deployToCustom;
    /**
     * Run command in specified directory
     * @param command Command to run
     * @param args Command arguments
     * @param cwd Working directory
     * @returns Promise resolving when command completes
     */
    private runCommand;
    /**
     * Run command and capture output
     * @param command Command to run
     * @param args Command arguments
     * @param cwd Working directory
     * @returns Promise resolving to command output
     */
    private runCommandWithOutput;
    deploy(target: DeploymentTarget): Promise<string>;
    getDeploymentStatus(target: DeploymentTarget): Promise<string>;
}
